import java.io.*;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class lmap {
    static class Pair {

        String first;
        String second;

        public Pair getPrevious() {
            return previous;
        }

        public void setPrevious(Pair previous) {
            this.previous = previous;
        }

        public Pair getNext() {
            return next;
        }

        public void setNext(Pair next) {
            this.next = next;
        }

        private Pair previous;
        private Pair next;

        Pair(String i, String j) {
            this.first = i;
            this.second = j;
        }

        public String getFirst() {
            return first;
        }

        public String getSecond() {
            return second;
        }
    }

    static int N = (int) 1e+6 + 3;
    static ArrayList<Pair>[] massMap = new ArrayList[N];


    public static int getHash(String s) {
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            result = (result * 53 + (int) s.charAt(i) - 'a' + 1);
        }
        return (result % N + N) % N;
    }


    static Pair lastAdded = null;

    public static void main(String[] args) throws IOException {
        String key;
        String value;
        BufferedReader in = new BufferedReader(new FileReader("linkedmap.in"));
        PrintWriter out = new PrintWriter(new File("linkedmap.out"));

        long startTime = System.currentTimeMillis();
        for (int i = 0; i < N; i++) {
            massMap[i] = new ArrayList<>(0);
        }


        String s = in.readLine();
        while (s != null) {
            StringTokenizer st = new StringTokenizer(s);
            String op = st.nextToken();
            key = st.nextToken();
            int index = getHash(key);

            switch (op) {
                case "put": {
                    value = st.nextToken();
                    Pair existed = getElement(index, key);
                    if (existed != null) {
                        existed.second = value;
                    }else {
                        Pair added = new Pair(key, value);
                        added.setPrevious(lastAdded);
                        if (lastAdded != null) {
                            lastAdded.setNext(added);
                        }
                        lastAdded = added;
                        massMap[index].add(added);
                    }
                }
                break;
                case "delete": {
                    removeSmth(index, key);
                }
                break;
                case "get": {
                    Pair element = getElement(index, key);
                    if (element == null) {
                        out.println("none");
                    } else {
                        out.println(element.getSecond());
                    }
                }
                break;
                case "prev": {
                    boolean hasPrev = false;
                    for (int i = 0; i < massMap[index].size(); i++) {
                        if (massMap[index].get(i).getFirst().equals(key)) {
                            if (massMap[index].get(i).getPrevious() != null) {
                                out.println(massMap[index].get(i).getPrevious().getSecond());
                                hasPrev = true;
                                break;
                            }
                        }
                    }
                    if (!hasPrev) {
                        out.println("none");
                    }
                }
                break;
                case "next": {
                    boolean hasNext = false;
                    for (int i = 0; i < massMap[index].size(); i++) {
                        if (massMap[index].get(i).getFirst().equals(key)) {
                            if (massMap[index].get(i).getNext() != null) {
                                out.println(massMap[index].get(i).getNext().getSecond());
                                hasNext = true;
                                break;
                            }
                        }
                    }
                    if (!hasNext) {
                        out.println("none");
                    }
                    break;
                }
            }
            s = in.readLine();
        }
        System.out.println((double) (System.currentTimeMillis() - startTime) / 1000);
        out.close();
    }

    private static void removeSmth(int index, String key) {
        for (int i = 0; i < massMap[index].size(); i++) {
            if (massMap[index].get(i).getFirst().equals(key)) {
                if (lastAdded == massMap[index].get(i)) {
                    lastAdded = lastAdded.getPrevious();
                }
                if (massMap[index].get(i).getPrevious() != null) {
                    massMap[index].get(i).getPrevious().setNext(massMap[index].get(i).getNext());
                }
                if (massMap[index].get(i).getNext() != null) {
                    massMap[index].get(i).getNext().setPrevious(massMap[index].get(i).getPrevious());
                }
                massMap[index].remove(i);
                break;
            }
        }
    }

    private static Pair getElement(int index, String key) {
        for (int i = 0; i < massMap[index].size(); i++) {
            if (massMap[index].get(i).getFirst().equals(key)) {
                return massMap[index].get(i);
            }
        }
        return null;
    }
}
